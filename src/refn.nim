import tables
import strutils
import strformat

type
  region_t* = ref object
    chrom*: string
    start*: uint32
    stop*:  uint32

proc `$`*(r: region_t): string =
  if r == nil:
    return ""
  if r.stop != 0:
    return format("$1:$2-$3", r.chrom, r.start + 1, r.stop)
  else:
    return format("$1:$2", r.chrom, r.start + 1)

const ref_n_line = """1 	         0	     10001
1 	    177417	    227418
1 	    267719	    317720
1 	    471368	    521369
1 	   2634220	   2684221
1 	   3845268	   3995269
1 	  13052998	  13102999
1 	  13219912	  13319913
1 	  13557162	  13607163
1 	  17125658	  17175659
1 	  29878082	  30028083
1 	 103863906	 103913907
1 	 120697156	 120747157
1 	 120936695	 121086696
1 	 121485434	 142535435
1 	 142731022	 142781023
1 	 142967761	 143117762
1 	 143292816	 143342817
1 	 143544525	 143644526
1 	 143771002	 143871003
1 	 144095783	 144145784
1 	 144224481	 144274482
1 	 144401744	 144451745
1 	 144622413	 144672414
1 	 144710724	 144810725
1 	 145833118	 145883119
1 	 146164650	 146214651
1 	 146253299	 146303300
1 	 148026038	 148176039
1 	 148361358	 148511359
1 	 148684147	 148734148
1 	 148954460	 149004461
1 	 149459645	 149509646
1 	 205922707	 206072708
1 	 206332221	 206482222
1 	 223747846	 223797847
1 	 235192211	 235242212
1 	 248908210	 249058211
1 	 249240621	 249250622
2 	         0	     10001
2 	   3529312	   3579313
2 	   5018788	   5118789
2 	  16279724	  16329725
2 	  21153113	  21178114
2 	  31705550	  31705552
2 	  31725939	  31726791
2 	  31816827	  31816829
2 	  31816854	  31816856
2 	  31816858	  31816860
2 	  33092197	  33093198
2 	  33141692	  33142693
2 	  87668206	  87718207
2 	  89630436	  89830437
2 	  90321525	  90371526
2 	  90545103	  91595104
2 	  92326171	  95326172
2 	 110109337	 110251338
2 	 149690582	 149790583
2 	 234003741	 234053742
2 	 239801978	 239831979
2 	 240784132	 240809133
2 	 243102476	 243152477
2 	 243189373	 243199374
3 	         0	     60001
3 	  60104768	  60104770
3 	  60190063	  60190065
3 	  66170270	  66270271
3 	  90504854	  93504855
3 	 194041961	 194047252
3 	 197962430	 198022431
4 	         0	     10001
4 	   1423146	   1478647
4 	   8799203	   8818204
4 	   9274642	   9324643
4 	  31820917	  31837418
4 	  32834638	  32840639
4 	  40296396	  40297097
4 	  49338941	  49488942
4 	  49660117	  52660118
4 	  59739333	  59789334
4 	  75427379	  75452280
4 	 191044276	 191154277
5 	         0	     10001
5 	  17530657	  17580658
5 	  46405641	  49405642
5 	  91636128	  91686129
5 	 138787073	 138837074
5 	 155138727	 155188728
5 	 180905260	 180915261
6 	         0	     60001
6 	  58087659	  58137660
6 	  58780166	  61880167
6 	  62128589	  62178590
6 	  95680543	  95830544
6 	 115539742	 115539744
6 	 157559467	 157609468
6 	 157641300	 157691301
6 	 167942073	 168042074
6 	 170279972	 170329973
6 	 171055067	 171115068
7 	         0	     10001
7 	    232484	    282485
7 	  50370631	  50410632
7 	  58054331	  61054332
7 	  61310513	  61360514
7 	  61460465	  61510466
7 	  61677020	  61727021
7 	  61917157	  61967158
7 	  74715724	  74765725
7 	 100556043	 100606044
7 	 130154523	 130254524
7 	 139379377	 139404378
7 	 142048195	 142098196
7 	 142276197	 142326198
7 	 143347897	 143397898
7 	 154270634	 154370635
7 	 159128663	 159138664
8 	         0	     10001
8 	   7474649	   7524650
8 	  12091854	  12141855
8 	  43838887	  46838888
8 	  48130499	  48135600
8 	  86576451	  86726452
8 	 142766515	 142816516
8 	 145332588	 145432589
8 	 146304022	 146364023
9 	         0	     10001
9 	  39663686	  39713687
9 	  39974796	  40024797
9 	  40233029	  40283030
9 	  40425834	  40475835
9 	  40940341	  40990342
9 	  41143214	  41193215
9 	  41365793	  41415794
9 	  42613955	  42663956
9 	  43213698	  43313699
9 	  43946569	  43996570
9 	  44676646	  44726647
9 	  44908293	  44958294
9 	  45250203	  45350204
9 	  45815521	  45865522
9 	  46216430	  46266431
9 	  46461039	  46561040
9 	  47060133	  47160134
9 	  47317679	  65467680
9 	  65918360	  65968361
9 	  66192215	  66242216
9 	  66404656	  66454657
9 	  66614195	  66664196
9 	  66863343	  66913344
9 	  67107834	  67207835
9 	  67366296	  67516297
9 	  67987998	  68137999
9 	  68514181	  68664182
9 	  68838946	  68988947
9 	  69278385	  69328386
9 	  70010542	  70060543
9 	  70218729	  70318730
9 	  70506535	  70556536
9 	  70735468	  70835469
9 	  92343416	  92443417
9 	  92528796	  92678797
9 	 133073060	 133223061
9 	 137041193	 137091194
9 	 139166997	 139216998
9 	 141153431	 141213432
10	         0	     60001
10	  17974675	  18024676
10	  37412173	  37412175
10	  38818835	  38868836
10	  39154935	  42354936
10	  42546687	  42596688
10	  46426964	  46476965
10	  47429169	  47529170
10	  47792476	  47892477
10	  48055707	  48105708
10	  49095536	  49195537
10	  51137410	  51187411
10	  51398845	  51448846
10	  54900228	  54900231
10	  60027702	  60027704
10	  61482805	  61482807
10	  64321063	  64321065
10	  64321065	  64321067
10	  64340155	  64340157
10	 116065824	 116065826
10	 125869472	 125919473
10	 128616069	 128766070
10	 133381404	 133431405
10	 133677527	 133727528
10	 135524747	 135534748
11	         0	     60001
11	   1162759	   1212760
11	  50783853	  51090854
11	  51594205	  54694206
11	  69089801	  69139802
11	  69724695	  69774696
11	  87688378	  87738379
11	  96287584	  96437585
11	 134946516	 135006517
12	         0	     60001
12	     95739	    145740
12	   6910467	   6910469
12	   6910703	   6910705
12	   7189876	   7239877
12	  34856694	  37856695
12	 109373470	 109423471
12	 121965036	 121965237
12	 122530623	 122580624
12	 123928080	 123928281
12	 123960721	 123960822
12	 132706992	 132806993
12	 133841895	 133851896
13	         0	  19020001
13	  86760324	  86910325
13	 112353994	 112503995
13	 114325993	 114425994
13	 114639948	 114739949
13	 115109878	 115169879
14	         0	  19000001
14	 107289540	 107349541
15	         0	  20000001
15	  20894633	  20935076
15	  21398819	  21885001
15	  22212114	  22262115
15	  22596193	  22646194
15	  23514853	  23564854
15	  27591199	  27591201
15	  27591204	  27591207
15	  29159443	  29209444
15	  82829645	  82879646
15	  84984473	  85034474
15	 102521392	 102531393
16	         0	     60001
16	   8636921	   8686922
16	  34023150	  34173151
16	  35285801	  46385802
16	  88389383	  88439384
16	  90294753	  90354754
17	    296626	    396627
17	  21566608	  21666609
17	  22263006	  25263007
17	  34675848	  34725849
17	  62410760	  62460761
17	  77546461	  77596462
17	  79709049	  79759050
18	         0	     10001
18	  15410898	  18510899
18	  52059136	  52209137
18	  72283353	  72333354
18	  75721820	  75771821
18	  78011249	  78011251
18	  78011257	  78011259
18	  78011905	  78011907
18	  78013445	  78013447
18	  78013475	  78013477
18	  78013482	  78013484
18	  78013485	  78013490
18	  78013508	  78013511
18	  78013520	  78013522
18	  78013525	  78013528
18	  78013536	  78013538
18	  78013539	  78013541
18	  78014203	  78014205
18	  78014563	  78014565
18	  78017248	  78077249
19	         0	     60001
19	   7346004	   7396005
19	   8687198	   8737199
19	  20523415	  20573416
19	  24631782	  27731783
19	  59118983	  59128984
20	         0	     60001
20	  26319569	  29419570
20	  29653908	  29803909
20	  34897085	  34947086
20	  61091437	  61141438
20	  61213369	  61263370
20	  62965520	  63025521
21	         0	   9411194
21	   9595548	   9645549
21	   9775437	   9825438
21	  10034920	  10084921
21	  10215976	  10365977
21	  10647896	  10697897
21	  11188129	  14338130
21	  33157035	  33157056
21	  33157379	  33157390
21	  40285944	  40285955
21	  42955559	  43005560
21	  43226828	  43227329
21	  43249342	  43250843
21	  44035894	  44035905
21	  44632664	  44682665
21	  44888040	  44888051
21	  48119895	  48129896
22	         0	  16050001
22	  16697850	  16847851
22	  19178139	  19178141
22	  19178159	  19178161
22	  19178161	  19178165
22	  19178165	  19178168
22	  19178168	  19178170
22	  19178263	  19178265
22	  19178267	  19178269
22	  19178273	  19178275
22	  19178283	  19178285
22	  19178310	  19178312
22	  19178314	  19178316
22	  19179518	  19179520
22	  19193925	  19193927
22	  19200634	  19200636
22	  19200640	  19200642
22	  19205396	  19205398
22	  19205400	  19205402
22	  19205448	  19205450
22	  20509431	  20609432
22	  50364777	  50414778
22	  51244566	  51304567
X 	         0	     60001
X 	     94821	    144822
X 	    231384	    281385
X 	   1047557	   1097558
X 	   1134113	   1184114
X 	   1264234	   1314235
X 	   2068238	   2118239
X 	   7623882	   7673883
X 	  10738674	  10788675
X 	  37098256	  37148257
X 	  49242997	  49292998
X 	  49974173	  50024174
X 	  52395914	  52445915
X 	  58582012	  61682013
X 	  76653692	  76703693
X 	 113517668	 113567669
X 	 115682290	 115732291
X 	 120013235	 120063236
X 	 143507324	 143557325
X 	 148906424	 148956425
X 	 149032062	 149082063
X 	 152277099	 152327100
X 	 155260560	 155270561
Y 	         0	   2649521
Y 	   8914955	   8964956
Y 	   9241322	   9291323
Y 	  10104553	  13104554
Y 	  13143954	  13193955
Y 	  13748578	  13798579
Y 	  20143885	  20193886
Y 	  22369679	  22419680
Y 	  23901428	  23951429
Y 	  28819361	  58819362
Y 	  58917656	  58967657
Y 	  59034049	  59373567
MT	      3106	      3108"""


var refn_table = newTable[string, seq[region_t]]()
for l in ref_n_line.split("\n"):
  var 
    fs = l.split("\t")[0..<3]
    chrom = fs[0].strip()
    start = parse_int(fs[1].strip()).uint32
    stop  = parse_int(fs[2].strip()).uint32
    reg = region_t(chrom:chrom, start: start, stop: stop)

  discard refn_table.hasKeyOrPut(reg.chrom, new_seq[region_t]())
  refn_table[reg.chrom].add(reg)


proc base_is_N*(chrom: string, ipos: int): bool =
    # Check if ipos is in the regions
    if not refn_table.hasKey(chrom): 
        return false
    
    for region in refn_table[chrom]:
        if ipos >= int(region.start) and ipos < int(region.stop):
            return true

    return false


proc bed_to_table*(bed: string): TableRef[string, seq[region_t]] =
  var bed_regions = newTable[string, seq[region_t]]()
  for l in bed.lines:
    if l.strip()[0] == '#':
      continue
    var cse = l.strip().split('\t', 3)
    var
      s = parse_int(cse[1].strip())
      e = parse_int(cse[2].strip())
      reg = region_t(chrom: cse[0].strip(), start: uint32(s), stop: uint32(e))
    if s > e:
      stderr.write_line(fmt"start > end in bed line: {l}")
      quit(-1)

    discard bed_regions.hasKeyOrPut(reg.chrom, new_seq[region_t]())
    bed_regions[reg.chrom].add(reg)

  return bed_regions

